ts.plot(fit1$x, fit$fitted, gpars = list(col = c("blue", "red")))
ts.plot(fit1$x, fit$fitted, gpars = list(col = c("blue", "green")))
ts.plot(fit1$x, fit$fitted, gpars = list(col = c("red", "green")))
ts.plot(fit1$x, fit$fitted, gpars = list(col = c("blue", "red")))
ts.plot(fit1$x, fit1$fitted, gpars = list(col = c("blue", "red")))
ts.plot(fit2$x, fit2$fitted, gpars = list(col = c("blue", "red")))
ts.plot(fit1$x, fit1$fitted, gpars = list(col = c("blue", "red")))
ts.plot(fit2$x, fit2$fitted, gpars = list(col = c("blue", "red")))
ts.plot(fit3$x, fit3$fitted, gpars = list(col = c("blue", "red")))
ts.plot(fit4$x, fit4$fitted, gpars = list(col = c("blue", "red")))
forecast1 = forecast(fit1, h=10)
forecast1 = forecast(fit1, h=10)
plot(forecast1)
forecast1 = forecast(fit1, h=6)
plot(forecast1)
?AIC
AIC(fit1, fit2)
AIC(fit1, fit2, fit3, fit4)
AIC(fit1, fit2, fit3, fit4)
BIC(fit1, fit2, fit3, fit4)
forecast1 = forecast(fit1, h=6)
plot(forecast1)
?ts.plot
ts.plot(fit1$x, fit1$fitted, gpars = list(col = c("blue", "red"), ggtitle = "Yes"))
ts.plot(fit1$x, fit1$fitted, gpars = list(col = c("blue", "red"), title = "Yes"))
ts.plot(fit1$x, fit1$fitted, gpars = list(col = c("blue", "red")))
ts.plot(fit1$x, fit1$fitted, gpars = list(main = "yes",col = c("blue", "red")))
ts.plot(fit1$x, fit1$fitted, gpars = list(main = "ARIMA(0,1,0)",col = c("blue", "red")))
ts.plot(fit2$x, fit2$fitted, gpars = list(main = "ARIMA(1,1,0)",col = c("blue", "red")))
ts.plot(fit3$x, fit3$fitted, gpars = list(main = "ARIMA(0,1,1)",col = c("blue", "red")))
ts.plot(fit4$x, fit4$fitted, gpars = list(main = "ARIMA(1,1,1)",col = c("blue", "red")))
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("rmarkdown")
render(Exam 2.Rmd)
remove.packages("rmarkdown")
remove.packages("knitr")
remove.packages("rmarkdown")
install.packages('knitr', repos = c('http://rforge.net', 'http://cran.rstudio.org'),
type = 'source')
install.packages("knitr", repos = c("http://rforge.net", "http://cran.rstudio.org"), type = "source")
library(readr)
library(stats)
library(ggplot2)
library(tseries)
library(forecast)
library(TSA)
library(rucm)
library(vars)
library(ggplot2)
Shanghai <- read_csv("~/Documents/Practicum I/Exam 2/Shanghai license plate price.csv",
col_types = cols(Date = col_date(format = "%Y/%m")))
data_temp <- read_csv("~/Documents/Practicum I/Exam 2/data_temp.csv",
col_types = cols(Month = col_date(format = "%Y-%m")))
temp = ts(data_temp$temperature, start=c(1920, 1), end=c(1939, 12), frequency=12)
temp = ts(data_temp$temperature, start=c(1920, 1), end=c(1939, 12), frequency=12)
ts.plot(temp)
HoltWinters(temp) #9.f
model <- ucm(formula = temp~0, data = temp, level = TRUE)
model #Printing method for class ucm
periodogram(temp) #9.c
?periodogram
periodogram(temp)
?periodogram
peri = periodogram(temp)
peri$freq
peri$spec
kpss.test(temp) #9.d
adf.test(temp) #9.d
peri$demean
peri = periodogram(temp)
peri = periodogram(temp)
dd = data.frame(freq=peri$freq, spec=peri$spec)
order = dd[order(-dd$spec),]
top2 = head(order, 2)
# display the 2 highest "power" frequencies
top2
temp
n <- 200
x <- sin(1:n / 4) + rnorm(n, 0, .1)
x
plot(x)
periodogram(x)
n <- 200
x <- sin(1:n / 4) + rnorm(n, 0, .1)
plot(x)
periodogram(x)
peri = periodogram(temp)
dd = data.frame(freq=peri$freq, spec=peri$spec)
order = dd[order(-dd$spec),]
top2 = head(order, 2)
# display the 2 highest "power" frequencies
top2
temp = ts(data_temp$temperature, start=c(1920, 1), end=c(1939, 12), frequency=12)
ts.plot(temp)
?HoltWinters
peri = periodogram(temp)
dd = data.frame(freq=peri$freq, spec=peri$spec)
order = dd[order(-dd$spec),]
top2 = head(order, 2)
# display the 2 highest "power" frequencies
top2
model <- ucm(formula = temp~0, data = temp, level = TRUE)
model #Printing method for class ucm
HoltWinters(temp) #9.f
library(readr)
library(stats)
library(ggplot2)
library(tseries)
library(forecast)
library(TSA)
library(rucm)
library(vars)
library(ggplot2)
Shanghai <- read_csv("~/Documents/Practicum I/Exam 2/Shanghai license plate price.csv",
col_types = cols(Date = col_date(format = "%Y/%m")))
data_temp <- read_csv("~/Documents/Practicum I/Exam 2/data_temp.csv",
col_types = cols(Month = col_date(format = "%Y-%m")))
HW = HoltWinters(temp) #9.f
forecast2 = forecast(HW, h=6)
plot(forecast2)
HW = HoltWinters(temp) #9.f
forecast2 = forecast(HW, h=16)
plot(forecast2)
HW$fitted
HW$fitted[xhat]
HW$fitted$xhat
HW$x
HW$fitted
ts.plot(HW$fitted, HW$x, gpars = list(main = "ARIMA(0,1,0)",col = c("blue", "red")))
HW$fitted[,1]
ts.plot(HW$fitted[,1], HW$x, gpars = list(main = "ARIMA(0,1,0)",col = c("blue", "red")))
HW = HoltWinters(temp) #9.f
ts.plot(HW$fitted[,1], HW$x, gpars = list(main = "Holt Winter Fitted vs Actual",col = c("blue", "red")))
forecast2 = forecast(HW, h=18)
plot(forecast2)
?ucm
model <- ucm(formula = temp~0, data = temp, season = TRUE, season.length = 12)
model #Printing method for class ucm
?ucm
model <- ucm(formula = temp~0, data = temp)
model #Printing method for class ucm
UCM <- ucm(formula = temp~0, data = temp)
UCM #Printing method for class ucm
forecast3 = forecast(UCM, h=12)
ts.plot(UCM$est, UCM$model, gpars = list(main = "Holt Winter Fitted vs Actual",col = c("blue", "red")))
UCM$est
UCModel <- ucm(temp~0, data = temp)
UCModel
UCModel <- ucm(temp~0, data = temp)
UCModel
plot(temp, ylab = "Flow of Nile")
lines(UMModel$s.level, col = "blue")
plot(temp, ylab = "Flow of Nile")
lines(UCModel$s.level, col = "blue")
legend("topright", legend = c("Observed flow","S_level"), col = c("black","blue"), lty = 1)
HW = HoltWinters(temp) #9.f
ts.plot(HW$fitted[,1], HW$x, gpars = list(main = "Holt Winter Fitted vs Actual",col = c("blue", "red"), legend("topright", legend = c("Observed flow","S_level"), col = c("black","blue"), lty = 1)))
HW = HoltWinters(temp) #9.f
ts.plot(HW$fitted[,1], HW$x, gpars = list(main = "Holt Winter Fitted vs Actual",col = c("blue", "red"), legend = c("Observed flow","S_level"), col = c("black","blue"), lty = 1))
HW = HoltWinters(temp) #9.f
ts.plot(HW$fitted[,1], HW$x, gpars = list(main = "Holt Winter Fitted vs Actual",col = c("blue", "red"), legend = c("Observed flow","S_level")))
forecast2 = forecast(HW, h=18)
plot(forecast2)
HW = HoltWinters(temp) #9.f
ts.plot(HW$fitted[,1], HW$x, gpars = list(main = "Holt Winter Fitted vs Actual",col = c("blue", "red"), legend = c("Observed flow","S_level"), "topright"))
HW = HoltWinters(temp) #9.f
ts.plot(HW$fitted[,1], HW$x, gpars = list(main = "Holt Winter Fitted vs Actual",col = c("blue", "red")))
forecast2 = forecast(HW, h=18)
plot(forecast2)
HW = HoltWinters(temp) #9.f
ts.plot(HW$fitted[,1], HW$x, gpars = list(main = "Holt Winter Fitted vs Actual",col = c("blue", "red")))
legend("topright", legend = c("Observed flow","S_level"), col = c("black","blue"), lty = 1)
forecast2 = forecast(HW, h=18)
plot(forecast2)
HW = HoltWinters(temp) #9.f
ts.plot(HW$fitted[,1], HW$x, gpars = list(main = "Holt Winter Fitted vs Observed",col = c("blue", "red")))
legend("topright", legend = c("Observed","Predicted"), col = c("blue","red"), lty = 1)
forecast2 = forecast(HW, h=18)
plot(forecast2)
HW = HoltWinters(temp) #9.f
ts.plot(HW$fitted[,1], HW$x, gpars = list(main = "Holt Winter Fitted vs Observed",col = c("blue", "red")))
legend("topright", legend = c("Predicted","Observed"), col = c("blue","red"), lty = 1)
forecast2 = forecast(HW, h=18)
plot(forecast2)
HW = HoltWinters(temp) #9.f
ts.plot(HW$fitted[,1], HW$x, gpars = list(main = "Holt Winter Fitted vs Observed",col = c("blue", "red")))
legend("topright", legend = c("Predicted","Observed"), col = c("blue","red"), lty = 1)
forecast2 = forecast(HW, h=18)
plot(forecast2)
legend("topright", legend = c("Predicted","Observed"), col = c("blue","red"), lty = 1)
forecast1 = forecast(fit1, h=6)
library(readr)
library(stats)
library(ggplot2)
library(tseries)
library(forecast)
library(TSA)
library(rucm)
library(vars)
library(ggplot2)
Shanghai <- read_csv("~/Documents/Practicum I/Exam 2/Shanghai license plate price.csv",
col_types = cols(Date = col_date(format = "%Y/%m")))
data_temp <- read_csv("~/Documents/Practicum I/Exam 2/data_temp.csv",
col_types = cols(Month = col_date(format = "%Y-%m")))
qplot(Date, `Total number of applicants`, data = Shanghai, geom = "line") #no seasonality
qplot(Month, temperature, data = data_temp, geom = "line") #seasonality
qplot(Date, `Total number of applicants`, data = Shanghai, geom = "line") #no seasonality
shang = ts(Shanghai$`Total number of applicants`, start=c(2002, 1), end=c(2018, 2), frequency=12)
acf(shang) #3
kpss.test(shang)
adf.test(shang)
ndiffs(shang, test = "kpss")
shang_dif = diff(shang, differences = 1)
plot(shang_dif)
acf(shang_dif)
kpss.test(shang_dif)
adf.test(shang_dif)
shang2 = ts(Shanghai[,2:4], start=c(2002, 1), end=c(2018, 2), frequency=12)
var.6 = VAR(shang2, p=1, type = "none")
arch.test(var.6)
pacf(shang_dif)
auto.arima(shang)
fit1 = Arima(shang, order = c(0,1,0))
fit2 = Arima(shang, order = c(1,1,0))
fit3 = Arima(shang, order = c(0,1,1))
fit4 = Arima(shang, order = c(1,1,1))
AIC(fit1, fit2, fit3, fit4)
BIC(fit1, fit2, fit3, fit4)
ts.plot(fit1$x, fit1$fitted, gpars = list(main = "ARIMA(0,1,0)",col = c("blue", "red")))
ts.plot(fit2$x, fit2$fitted, gpars = list(main = "ARIMA(1,1,0)",col = c("blue", "red")))
ts.plot(fit3$x, fit3$fitted, gpars = list(main = "ARIMA(0,1,1)",col = c("blue", "red")))
ts.plot(fit4$x, fit4$fitted, gpars = list(main = "ARIMA(1,1,1)",col = c("blue", "red")))
forecast1 = forecast(fit1, h=6)
plot(forecast1)
legend("topright", legend = c("Predicted","Observed"), col = c("blue","black"), lty = 1)
forecast1 = forecast(fit1, h=6)
plot(forecast1)
legend("topleft", legend = c("Predicted","Observed"), col = c("blue","black"), lty = 1)
ts.plot(fit1$x, fit1$fitted, gpars = list(main = "ARIMA(0,1,0)",col = c("blue", "red")))
legend("topleft", legend = c("Predicted","Observed"), col = c("blue","red"), lty = 1)
ts.plot(fit2$x, fit2$fitted, gpars = list(main = "ARIMA(1,1,0)",col = c("blue", "red")))
ts.plot(fit3$x, fit3$fitted, gpars = list(main = "ARIMA(0,1,1)",col = c("blue", "red")))
ts.plot(fit4$x, fit4$fitted, gpars = list(main = "ARIMA(1,1,1)",col = c("blue", "red")))
ts.plot(fit1$x, fit1$fitted, gpars = list(main = "ARIMA(0,1,0)",col = c("red", "blue")))
legend("topleft", legend = c("Predicted","Observed"), col = c("blue","red"), lty = 1)
ts.plot(fit2$x, fit2$fitted, gpars = list(main = "ARIMA(1,1,0)",col = c("blue", "red")))
ts.plot(fit3$x, fit3$fitted, gpars = list(main = "ARIMA(0,1,1)",col = c("blue", "red")))
ts.plot(fit4$x, fit4$fitted, gpars = list(main = "ARIMA(1,1,1)",col = c("blue", "red")))
ts.plot(fit1$x, fit1$fitted, gpars = list(main = "ARIMA(0,1,0)",col = c("red", "blue")))
legend("topleft", legend = c("Predicted","Observed"), col = c("red","blue"), lty = 1)
ts.plot(fit2$x, fit2$fitted, gpars = list(main = "ARIMA(1,1,0)",col = c("blue", "red")))
ts.plot(fit3$x, fit3$fitted, gpars = list(main = "ARIMA(0,1,1)",col = c("blue", "red")))
ts.plot(fit4$x, fit4$fitted, gpars = list(main = "ARIMA(1,1,1)",col = c("blue", "red")))
ts.plot(fit1$x, fit1$fitted, gpars = list(main = "ARIMA(0,1,0)",col = c("red", "blue")))
legend("topleft", legend = c("Predicted","Observed"), col = c("red","blue"), lty = 1)
ts.plot(fit2$x, fit2$fitted, gpars = list(main = "ARIMA(1,1,0)",col = c("blue", "red")))
legend("topleft", legend = c("Predicted","Observed"), col = c("red","blue"), lty = 1)
ts.plot(fit3$x, fit3$fitted, gpars = list(main = "ARIMA(0,1,1)",col = c("blue", "red")))
legend("topleft", legend = c("Predicted","Observed"), col = c("red","blue"), lty = 1)
ts.plot(fit4$x, fit4$fitted, gpars = list(main = "ARIMA(1,1,1)",col = c("blue", "red")))
legend("topleft", legend = c("Predicted","Observed"), col = c("red","blue"), lty = 1)
ts.plot(fit1$x, fit1$fitted, gpars = list(main = "ARIMA(0,1,0)",col = c("red", "blue")))
legend("topleft", legend = c("Predicted","Observed"), col = c("red","blue"), lty = 1)
ts.plot(fit2$x, fit2$fitted, gpars = list(main = "ARIMA(1,1,0)",col = c("red", "blue")))
legend("topleft", legend = c("Predicted","Observed"), col = c("red","blue"), lty = 1)
ts.plot(fit3$x, fit3$fitted, gpars = list(main = "ARIMA(0,1,1)",col = c("red", "blue")))
legend("topleft", legend = c("Predicted","Observed"), col = c("red","blue"), lty = 1)
ts.plot(fit4$x, fit4$fitted, gpars = list(main = "ARIMA(1,1,1)",col = c("red", "blue")))
legend("topleft", legend = c("Predicted","Observed"), col = c("red","blue"), lty = 1)
HW = HoltWinters(temp) #9.f
ts.plot(HW$fitted[,1], HW$x, gpars = list(main = "Holt Winter Fitted vs Observed",col = c("blue", "red")))
legend("topright", legend = c("Predicted","Observed"), col = c("blue","red"), lty = 1)
forecast2 = forecast(HW, h=18)
plot(forecast2)
legend("topright", legend = c("Predicted","Observed"), col = c("blue","black"), lty = 1)
plot(UCModel$s.season, ylab = "Flow of Nile")
UCModel <- ucm(temp~0, data = temp, level = T)
UCModel
plot(UCModel$s.level, ylab = "Flow of Nile")
plot(UCModel$s.level, ylab = "Flow of Nile")
lines(temp, col = "blue")
plot(UCModel$s.level, ylab = "Flow of Nile")
plot(temp, ylab = "Flow of Nile")
plot(UCModel$est, ylab = "Flow of Nile")
ts.plot(UCModel$est)
UCModel$est
UCModel$y
UCModel$model$y
library(readr)
library(stats)
library(ggplot2)
library(tseries)
library(forecast)
library(TSA)
library(rucm)
library(vars)
library(ggplot2)
Shanghai <- read_csv("~/Documents/Practicum I/Exam 2/Shanghai license plate price.csv",
col_types = cols(Date = col_date(format = "%Y/%m")))
data_temp <- read_csv("~/Documents/Practicum I/Exam 2/data_temp.csv",
col_types = cols(Month = col_date(format = "%Y-%m")))
qplot(Date, `Total number of applicants`, data = Shanghai, geom = "line") #no seasonality
qplot(Month, temperature, data = data_temp, geom = "line") #seasonality
qplot(Date, `Total number of applicants`, data = Shanghai, geom = "line") #no seasonality
shang = ts(Shanghai$`Total number of applicants`, start=c(2002, 1), end=c(2018, 2), frequency=12)
acf(shang) #3
kpss.test(shang)
adf.test(shang)
ndiffs(shang, test = "kpss")
shang_dif = diff(shang, differences = 1)
plot(shang_dif)
acf(shang_dif)
kpss.test(shang_dif)
adf.test(shang_dif)
shang2 = ts(Shanghai[,2:4], start=c(2002, 1), end=c(2018, 2), frequency=12)
var.6 = VAR(shang2, p=1, type = "none")
arch.test(var.6)
pacf(shang_dif)
auto.arima(shang)
fit1 = Arima(shang, order = c(0,1,0))
fit2 = Arima(shang, order = c(1,1,0))
fit3 = Arima(shang, order = c(0,1,1))
fit4 = Arima(shang, order = c(1,1,1))
AIC(fit1, fit2, fit3, fit4)
BIC(fit1, fit2, fit3, fit4)
ts.plot(fit1$x, fit1$fitted, gpars = list(main = "ARIMA(0,1,0)",col = c("red", "blue")))
legend("topleft", legend = c("Predicted","Observed"), col = c("red","blue"), lty = 1)
ts.plot(fit2$x, fit2$fitted, gpars = list(main = "ARIMA(1,1,0)",col = c("red", "blue")))
legend("topleft", legend = c("Predicted","Observed"), col = c("red","blue"), lty = 1)
ts.plot(fit3$x, fit3$fitted, gpars = list(main = "ARIMA(0,1,1)",col = c("red", "blue")))
legend("topleft", legend = c("Predicted","Observed"), col = c("red","blue"), lty = 1)
ts.plot(fit4$x, fit4$fitted, gpars = list(main = "ARIMA(1,1,1)",col = c("red", "blue")))
legend("topleft", legend = c("Predicted","Observed"), col = c("red","blue"), lty = 1)
forecast1 = forecast(fit1, h=6)
plot(forecast1)
legend("topleft", legend = c("Predicted","Observed"), col = c("blue","black"), lty = 1)
temp = ts(data_temp$temperature, start=c(1920, 1), end=c(1939, 12), frequency=12)
ts.plot(temp)
peri = periodogram(temp)
dd = data.frame(freq=peri$freq, spec=peri$spec)
order = dd[order(-dd$spec),]
top2 = head(order, 2)
# display the 2 highest "power" frequencies
top2
kpss.test(temp)
adf.test(temp)
HW = HoltWinters(temp) #9.f
ts.plot(HW$fitted[,1], HW$x, gpars = list(main = "Holt Winter Fitted vs Observed",col = c("blue", "red")))
legend("topright", legend = c("Predicted","Observed"), col = c("blue","red"), lty = 1)
forecast2 = forecast(HW, h=18)
plot(forecast2)
legend("topright", legend = c("Predicted","Observed"), col = c("blue","black"), lty = 1)
UCModel <- ucm(temp~0, data = temp, level = T)
UCModel
UCModel <- ucm(temp~0, data = temp, level = TRUE, slope = TRUE)
predict(UCModel$model, n.ahead = 12)
j = predict(UCModel$model, n.ahead = 12)
nj = forecast(UCModel, h=12)
ts.plot(temp, UCM_predict, gpars = list(main = "Holt Winter Fitted vs Observed",col = c("blue", "red")))
UCModel <- ucm(temp~0, data = temp, level = TRUE, slope = TRUE)
UCM_predict = predict(UCModel$model, n.ahead = 12)
ts.plot(temp, UCM_predict, gpars = list(main = "Holt Winter Fitted vs Observed",col = c("blue", "red")))
ts.plot(HW$fitted[,1], HW$x, forecast2, gpars = list(main = "Holt Winter Fitted vs Observed",col = c("blue", "red")))
HW = HoltWinters(temp) #9.f
ts.plot(HW$fitted[,1], HW$x, gpars = list(main = "Holt Winter Fitted vs Observed",col = c("blue", "red")))
legend("topright", legend = c("Predicted","Observed"), col = c("blue","red"), lty = 1)
forecast2 = forecast(HW, h=18)
plot(forecast2)
legend("topright", legend = c("Predicted","Observed"), col = c("blue","black"), lty = 1)
UCModel <- ucm(temp~0, data = temp, level = TRUE, slope = TRUE)
UCModel
UCM_predict = predict(UCModel$model, n.ahead = 12)
ts.plot(temp, UCM_predict, gpars = list(main = "Holt Winter Fitted vs Observed",col = c("blue", "red")))
UCModel <- ucm(temp~0, data = temp)
UCModel
UCM_predict = predict(UCModel$model, n.ahead = 12)
ts.plot(temp, UCM_predict, gpars = list(main = "Holt Winter Fitted vs Observed",col = c("blue", "red")))
UCModel <- ucm(temp~0, data = temp, season = TRUE)
UCModel <- ucm(temp~0, data = temp, season = TRUE, season.length = 12)
UCModel
UCM_predict = predict(UCModel$model, n.ahead = 12)
ts.plot(temp, UCM_predict, gpars = list(main = "Holt Winter Fitted vs Observed",col = c("blue", "red")))
UCModel$est
UCModel <- ucm(temp~0, data = temp, season = TRUE, season.length = 12)
UCModel
UCM_predict = predict(UCModel$model, n.ahead = 12)
ts.plot(temp, UCM_predict, gpars = list(main = "Holt Winter Fitted vs Observed",col = c("blue", "red")))
UCModel <- ucm(temp~0, data = temp, cycle = TRUE, cycle.period =  12)
UCModel
UCM_predict = predict(UCModel$model, n.ahead = 12)
ts.plot(temp, UCM_predict, gpars = list(main = "Holt Winter Fitted vs Observed",col = c("blue", "red")))
plot(temp, ylab = "Flow of Nile")
lines(UCModel$s.cycle, col = "blue")
legend("topright", legend = c("Observed flow","S_level"), col = c("black","blue"), lty = 1)
plot(UCModel$s.cycle, ylab = "Flow of Nile")
UCModel$s.cycle
predict(UCModel$model)
plot(predict(UCModel$model))
UCModel <- ucm(temp~0, data = temp, season = TRUE, season.length =  12)
UCModel
plot(predict(UCModel$model))
UCM_predict = predict(UCModel$model, n.ahead = 12)
ts.plot(temp, UCM_predict, gpars = list(main = "Holt Winter Fitted vs Observed",col = c("blue", "red")))
plot(predict(UCModel$model$Z))
UCModel$model$Z
UCModel$model$Y
UCModel$model$y
UCModel$s.season
UCModel
UCModel$est.var.cycle
UCModel
plot(predict(UCModel$model))
UCModel$s.level
UCModel$s.season
UCModel$model$names
UCModel$model$P1
UCModel$model$u
UCModel <- ucm(temp~0, data = temp, season = TRUE, season.length =  12)
UCModel
plot(predict(UCModel$model))
ts.plot(predict(UCModel$model), temp, gpars = list(main = "Holt Winter Fitted vs Observed",col = c("blue", "red")))
legend("topright", legend = c("Predicted","Observed"), col = c("blue","red"), lty = 1)
UCModel <- ucm(temp~0, data = temp, season = TRUE, season.length =  12, irregular = TRUE)
UCModel
plot(predict(UCModel$model))
ts.plot(predict(UCModel$model), temp, gpars = list(main = "Holt Winter Fitted vs Observed",col = c("blue", "red")))
legend("topright", legend = c("Predicted","Observed"), col = c("blue","red"), lty = 1)
UCModel <- ucm(temp~0, data = temp, season = TRUE, season.length =  12, irregular = TRUE, slope = TRUE)
UCModel
plot(predict(UCModel$model))
ts.plot(predict(UCModel$model), temp, gpars = list(main = "Holt Winter Fitted vs Observed",col = c("blue", "red")))
legend("topright", legend = c("Predicted","Observed"), col = c("blue","red"), lty = 1)
UCModel <- ucm(temp~0, data = temp, season = TRUE, season.length =  12, irregular = TRUE, slope = TRUE, cycle = TRUE)
UCModel <- ucm(temp~0, data = temp, season = TRUE, season.length =  12, irregular = TRUE, slope = TRUE)
UCModel
UCM_predict = predict(UCModel$model, n.ahead = 12)
ts.plot(temp, UCM_predict, gpars = list(main = "Holt Winter Fitted vs Observed",col = c("blue", "red")))
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
library(Rfacebook)
library(scales)
library(reshape2)
library(corrplot)
library(textclean)
library(SnowballC)     # interface to the C libstemmer library that implements Porter's word stemming algorithm for collapsing words to a common root to aid comparison of vocabulary
library(twitteR)
library(tm)     	# text mining
library(syuzhet)     	# extracts sentiment and sentiment-derived plot arcs from text
library(sentimentr)     # sentiment analysis
library(wordcloud)
library(plyr)
library(ggplot2)
# Generate an access token to obtain your Twitter Access Token and Access Token Secret.
consumer_key    <- "BkiIHNzE2BvQhbRYVpkbZgGTA"
consumer_secret <-"zHAcSayUgKlfkksuf57oB0CMqFwDtgGI4TkDurXkEgNjHsqpnx"
access_token  <- "991503034650976257-W3MQKW99A0ec2pcm3kBw6ddXBIwkji5"
access_secret <- "bjhEqauHjM2gLPn7qUJvzThTWUW0vN3XVR8AkxsbphbD7"
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)     # Setup Twitter open authorization. Select 2.
## Twitter Sentiment Analysis
tweet1 <- searchTwitter("Deadpool", n=18000, lang="en", since = '2018-05-16', until = '2018-05-16')     # Pull Twitter feed for Arsenal.
tweet1 <- twListToDF(tweet1)     # Convert into a data frame for analysis.
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
library(Rfacebook)
library(scales)
library(reshape2)
library(corrplot)
library(textclean)
library(SnowballC)     # interface to the C libstemmer library that implements Porter's word stemming algorithm for collapsing words to a common root to aid comparison of vocabulary
library(twitteR)
library(tm)     	# text mining
library(syuzhet)     	# extracts sentiment and sentiment-derived plot arcs from text
library(sentimentr)     # sentiment analysis
library(wordcloud)
library(plyr)
library(ggplot2)
# Generate an access token to obtain your Twitter Access Token and Access Token Secret.
consumer_key    <- "BkiIHNzE2BvQhbRYVpkbZgGTA"
consumer_secret <-"zHAcSayUgKlfkksuf57oB0CMqFwDtgGI4TkDurXkEgNjHsqpnx"
access_token  <- "991503034650976257-W3MQKW99A0ec2pcm3kBw6ddXBIwkji5"
access_secret <- "bjhEqauHjM2gLPn7qUJvzThTWUW0vN3XVR8AkxsbphbD7"
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)     # Setup Twitter open authorization. Select 2.
## Twitter Sentiment Analysis
tweet1 <- searchTwitter("Deadpool", n=10, lang="en")     # Pull Twitter feed for Arsenal.
tweet1 <- searchTwitter("Deadpool", n=1, lang="en")     # Pull Twitter feed for Arsenal.
tweet1 <- searchTwitter("Deadpool", n=1, lang="en")     # Pull Twitter feed for Arsenal.
tweet1 <- twListToDF(tweet1)     # Convert into a data frame for analysis.
View(tweet1)
tweet1 <- searchTwitter("Deadpool", n=18000, lang="en")     # Pull Twitter feed for Arsenal.
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
library(Rfacebook)
library(scales)
library(reshape2)
library(corrplot)
library(textclean)
library(SnowballC)     # interface to the C libstemmer library that implements Porter's word stemming algorithm for collapsing words to a common root to aid comparison of vocabulary
library(twitteR)
library(tm)     	# text mining
library(syuzhet)     	# extracts sentiment and sentiment-derived plot arcs from text
library(sentimentr)     # sentiment analysis
library(wordcloud)
library(plyr)
library(ggplot2)
# Generate an access token to obtain your Twitter Access Token and Access Token Secret.
consumer_key    <- "BkiIHNzE2BvQhbRYVpkbZgGTA"
consumer_secret <-"zHAcSayUgKlfkksuf57oB0CMqFwDtgGI4TkDurXkEgNjHsqpnx"
access_token  <- "991503034650976257-W3MQKW99A0ec2pcm3kBw6ddXBIwkji5"
access_secret <- "bjhEqauHjM2gLPn7qUJvzThTWUW0vN3XVR8AkxsbphbD7"
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)     # Setup Twitter open authorization. Select 2.
## Twitter Sentiment Analysis
tweet1 <- searchTwitter("Deadpool", n=17000, lang="en")     # Pull Twitter feed for Deadpool.
